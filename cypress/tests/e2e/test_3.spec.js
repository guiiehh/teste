describe('Suite de testes 2', () => {
    beforeEach(function() {
      cy.visit('./src/index.html') /* Visitar caminho relativo da aplica√ß√£o */
    })

// ** Marca√ß√£o e desmarca√ß√£o de inputs do tipo "Checkbox"
// Comandos que marcam e desmarcam
// .check -> para marcar, e .uncheck -> para desmarcar

it('Marca√ß√£o de ambos checkboxes, em seguida desmarca√ß√£o apenas do √∫ltimo', function() {
    cy.get('input[type="checkbox"]') // Identifica√ß√£o os 2 checkboxes
      .check() // Marca√ß√£o de todos os checkbox que encontrar
      .should('be.checked') // Verifica√ß√£o se n√£o est√£o marcados
      .last() // Para considerar apena so √∫ltimo elemento
      .uncheck() // Desmarcar o √∫ltimo checkbox
      .should('not.be.checked') // Verifica√ß√£o se o √∫ltimo n√£o est√° mais marcado
  })

  /** A fun√ß√£o .selectFile seleciona arquivos, como por exemplo, adiciona um anexo.
   
  Ou seja, primeiramente se utiliza o `cy.get('input[type="file"]')` para identificar 
  um campo de sele√ß√£o de arquivos, e em seguida encadeia um `.selectFile()`,
  passando ao mesmo o caminho relativo do arquivo (pasta fixture) que pretende fazer o_upload_ (string).

  .selectFile(file)  -> Passa um arquivo
  .selectFile(file, options)  -> Passa um arquivo e op√ß√µes
  .selectFile([file1, file2, ...])  -> Passa um array (lista de arquivos)
  .selectFile([file1, file2, ...], options)  -> Passa um array e op√ß√µes
*/

  it('Sele√ß√£o de um arquivo da pasta fixtures', function() {
    cy.get('input[type="file"]#file-upload') // Ou apenas escrever o id cy.get(#file-upload)
    // N√£o deve inicialmente ter nenhum valor pois n√£o foi selecionado ainda nenhum arquivo (verifica√ß√£o intermedi√°ria)
      .should('not.have.value') 
      // Caminho relativo do arquivo que quer fazer o upload (para a pasta fixtures dentro de Cypress)
      .selectFile('./cypress/fixtures/example.json')  
      // Verifica√ß√£o se que selecionou o arquivo corretamente,
      // ou seja, se ap√≥s a sele√ß√£o do arquivo o nome correto dele persiste no objeto files do input      
      .should(function($input) { // fun√ß√£o recebe como o argumento o input do tipo file, pode usar jquery
        expect($input[0].files[0].name).to.equal('example.json')
        // Ap√≥s o expect escrever propriedades do objeto: 
        // primeiramente que espera o "input" com √≠ndice 0 pois foi o primeiro qa retornar, 
        // o "files" com √≠ndice 0 tamb√©m pois quer o primeiro arquivo do array, 
        // e escrever "name" a seguir pois espera que o nome seja x
      })
  })

  it('Sele√ß√£o de um arquivo simulando um drag-and-drop', function() {
    cy.get('input[type="file"]')
      .should('not.have.value')
      // Primeiro argumento √© o camilho relativo do arquivo 
      // e o segundo argumento √© um objeto que vai ter a propriedade action com o valor 'drag-drop'
      // Assim, ao inv√©s de simular que est√° clicando no campo para selecionar o arquivo, 
      // que est√° arrastando o arquivo para cima do input (campo de upload)
      .selectFile('./cypress/fixtures/example.json', { action: 'drag-drop' })
      .should(function($input) {
        // console.log($input)
        expect($input[0].files[0].name).to.equal('example.json') 
      })
  })

    // Dar um alias para uma fixture e selecionar o arquivo baseado no alias que deu par a fixture
  it('Sele√ß√£o de um arquivo utilizando uma fixture para a qual foi dada um alias', function() {
    // Fun√ß√£o cy.fixture n√£o precisa passar o caminho relativo, apenas o nome do arquivo
    // e dar um nome para o arquivo, como sampleFile
    cy.fixture('example.json').as('sampleFile')
    cy.get('input[type="file"]')
      // Ao inv√©s de passar o caminho relativo para a fun√ß√£o selectFile, passa apenas o alias
      // Escrever o "@" antes do nome (alias)
      .selectFile('@sampleFile')
      .should(function($input) {
        expect($input[0].files[0].name).to.equal('example.json')
      })
  })

/** Lidando com links que abrem em outra aba - Limita√ß√£o do cypress em funcionar em apenas uma ba do navegator
 
 * Na [p√°gina de _trade-offs_](https://docs.cypress.io/guides/references/trade-offs) 
 da documenta√ß√£o oficial do Cypress (no momento da escrita desta aula), 
 h√° uma se√ß√£o que comenta da limita√ß√£o do [Cypress funcionar somente em uma aba do navegador]
 (https://docs.cypress.io/guides/references/trade-offs#Multiple-tabs)
 
# Para abrir a p√°gina em uma nova aba do navegador abaixo h√° 2 alternativas, por√©m, 
na documenta√ß√£o oficial, h√° ainda mais:

## Alternativa 1 - Confiar que o navegador funciona, ou seja, se um elemento do tipo √¢ncora (`a`) 
possui o atributo `target` com o valor `_blank`, quando clicado, obrigatoriamente o valor do atributo `href` 
ser√° aberto em uma nova aba. Este √© o compartamento padr√£o em qualquer navegador.
Neste caso, podemos simplesmente verificar tal caracter√≠stica, sem nem mesmo precisar clicar no elemento.
Ex: cy.get('.some-link').should('have.attr', 'target', '_blank')

## Alternativa 2 - Remover o atributo `target` do elemento
O Cypress deixa remover a propriedade `target` do elemento √¢ncora.
Para isso, usar a fun√ß√£o .invoke()
Ex: cy.get('#link-que-abre-em-outra-aba').invoke('removeAttr', 'target')

*/
  it('Verifica√ß√£o de que a pol√≠tica de privacidade abre em outra aba sem a necessidade de um clique', function() {
    // Verifica√ß√£o se h√° o target _blank, pois se h√° vai abrir em outra p√°gina
    cy.get('#privacy a').should('have.attr', 'target', '_blank')
  })


  it('Acesso a p√°gina da pol√≠tica de privacidade removendo o target e ent√£o clicanco no link', function() {
     // Identificar o link que abre em outra p√°gina, a p√°gina que vai abrir em outra aba tem que estar 
    cy.get('#privacy a')
    // Remover o atributo (a propriedade) target do elemento "a" (√¢ncora) para abrir outra p√°gina
    // na mesma aba que o cypress est√° sendo executado, j√° que ele n√£o executa os testes em outra aba
      .invoke('removeAttr', 'target') 
      .click()
    cy.contains('Talking About Testing').should('be.visible')
  })


  /*
O invoke pode ser utilizado para remover o atributo `target` de um elemento como no exemplo anterior, 
evitando que quando clicado, a p√°gina n√£o abra em outra aba.

Al√©m disso, no conte√∫do [Como ‚Äúsimular‚Äù um CTRL+V com Cypress](https://talkingabouttesting.com/2022/02/11/como-simular-um-ctrlv-com-cypress), 
fica demonstrado o uso do "".invoke('val')"", para definir o valor de um campo de texto, 
a fim de n√£o se perder tempo quando √© necess√°rio digitar um texto longo

2 outros usos do '.invoke()':
  - .invoke('show')
  - .invoke('hide')

O comando .invoke('show') for√ßa a exibi√ß√£o de um elemento HTML que esteja escondido, 
com um estilo "display: none;", por exemplo.
E o comando .invoke('hide') esconde um elemento que est√° sendo exibido. */


// Para funcionar esta segunda alternativa para a p√°gina abrir em outra aba 
// √© necess√°rio que a p√°gina esteja no mesmo dom√≠nio ou subdom√≠nio da aplica√ß√£o em teste 
// porque o Cypress tem uma limita√ß√£o de n√£o suportar m√∫ltiplos dom√≠nios 
  it('Exibi√ß√£o e omiss√£o [esconde] das mensagens de sucesso e erro usando o .invoke', function() {
    cy.get('.success')
      .should('not.be.visible')
      .invoke('show')
      // Pode utilizar ".and" depois do should
      .should('be.visible').and('contain', 'Mensagem enviada com sucesso.')
      .invoke('hide')
      .should('not.be.visible')
    cy.get('.error')
      .should('not.be.visible')
      .invoke('show')
      .should('be.visible')
      .and('contain', 'Valide os campos obrigat√≥rios!')
      .invoke('hide')
      .should('not.be.visible')
  })

  it('Preenchimento da √°rea de texto usando o comando invoke', function() {
    const longText = Cypress._.repeat('0123456789', 20) // Inser√ß√£o de 200 caracteres com este exemplo
    // Usar a fun√ß√£o .invoke para preencher a √°rea de texto
    cy.get('#open-text-area')
    // Invoca o valor do campo de texto e insere o valor sem precisar digitar, sendo ainda mais r√°pido que o uso de delay
      .invoke('val', longText) 
    // Verifica√ß√£o que o valor inserido persistiu no campo
      .should('have.value', longText)
  })

  it('Realiza√ß√£o de uma requisi√ß√£o HTTP', function()  {
    /* cy.request -> Executa requisi√ß√µes HTTP a n√≠vel de rede (execu√ß√£o dos comandos √† n√≠vel de rede),
    ganhando tempo no setup dos testes. Exemplos de uso:
    - Pode ser usado para obter a resposta do status (se retornou 200 ou n√£o)
    - Pode simular que o usuario j√° fez o login sem passar pela p√°gina de login, atrav√©s de um requisi√ß√£o, para entrar na p√°gina j√° logado
    Obs: cy.request e diferente de cy.intercept  */
    cy.request('https://cac-tat.s3.eu-central-1.amazonaws.com/index.html')
      // Verificar a resposta da requisi√ß√£o HTT 
      .should(function(response) {
      // Desestruturar a resposta da requisi√ß√£o, obtendo as informa√ß√µes abaixo
        const { status, statusText, body } = response
      // Verifica√ß√µes
        expect(status).to.equal(200)
        expect(statusText).to.equal('OK')
        // Pode usar .contains ao inv√©s de .to.include
        expect(body).to.include('CAC TAT') // Verificar se no corpo h√° o texto incluso
      })
  })

  it('Encontrar o gato escondido', function() {
    cy.get('#cat') // Uso de # seleciona pelo ID
      .invoke('show')
      .should('be.visible')
    cy.get('#title')
      .invoke('text', 'CAT TAT')
    cy.get('#subtitle')
      .invoke('text', 'Eu üíö gatos!')
  })
})

/* 
Redimensionar o navegador para simular o uso da aplica√ß√£o em um dispositivo m√≥vel
(em modo interativo ou em modo headless com viewport mobile)
Passar as dimens√µes diretamente via linha de comando ao executar o cypress
Ex: cypress open --config viewportWidth=370 viewportHeight=660

Exerc√≠cio 1 - Cria√ß√£o de um script no arquivo package.json que abre o Cupress Runner simulando um dispositivo com 
410 pixels de largura e 860 pixels de altura, simulando a execu√ß√£o em viewport mobile.
*/